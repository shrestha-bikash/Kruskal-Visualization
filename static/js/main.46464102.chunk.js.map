{"version":3,"sources":["networks.js","App.js","reportWebVitals.js","index.js"],"names":["network1","edges","e","w","nodes","network2","UnionFind","require","App","useState","network","updateNetwork","isClicked","startAnimation","useEffect","canvas","createCanvas","remove","size","zoom","edgelayout","add","color","map","item","edge","length","label","text","pause","net","nods","i","l","sorted","sort","a","b","console","log","minNode","u","v","x","y","forest","parent","rank","node","push","find","link","highlight","traverse","thickness","prim","className","onClick","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46464102.chunk.js","sourcesContent":["export const network1 = {\n    edges: [\n        {\n        e: [1, 2],\n        w: 11\n        },\n        {\n        e: [1, 6],\n        w: 2\n        },\n        {\n        e: [1, 4],\n        w: 10\n        },\n        {\n        e: [2, 3],\n        w: 9\n        },\n        {\n        e: [2, 4],\n        w: 6\n        },\n        {\n        e: [2, 5],\n        w: 7\n        },\n        {\n        e: [3, 5],\n        w: 5\n        },\n        {\n        e: [3, 8],\n        w: 15\n        },\n        {\n        e: [4, 6],\n        w: 14\n        },\n        {\n        e: [4, 7],\n        w: 3\n        },\n        {\n        e: [5, 7],\n        w: 12\n        },\n        {\n        e: [5, 8],\n        w: 1\n        },\n        {\n        e: [6, 7],\n        w: 13\n        },\n        {\n        e: [7, 8],\n        w: 4\n        }\n    ],\n    nodes: [1, 2, 3, 4, 5, 6, 7, 8]\n};\n\nexport const network2 = {\n    edges: [\n        {\n        e: [0, 1],\n        w: 4\n        },\n        {\n        e: [0, 7],\n        w: 8\n        },\n        {\n        e: [1, 2],\n        w: 8\n        },\n        {\n        e: [1, 7],\n        w: 11\n        },\n        {\n        e: [2, 3],\n        w: 7\n        },\n        {\n        e: [2, 5],\n        w: 4\n        },\n        {\n        e: [2, 8],\n        w: 2\n        },\n        {\n        e: [3, 4],\n        w: 9\n        },\n        {\n        e: [3, 5],\n        w: 14\n        },\n        {\n        e: [4, 5],\n        w: 10\n        },\n        {\n        e: [5, 6],\n        w: 2\n        },\n        {\n        e: [6, 7],\n        w: 1\n        },\n        {\n        e: [6, 8],\n        w: 6\n        },\n        {\n        e: [7, 8],\n        w: 7\n        }\n    ],\n    nodes: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n};\n\n  ","import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport { createCanvas } from 'algorithmx';\nimport { network1, network2 } from './networks';\n\nlet UnionFind = require('union-find');\n\n\nfunction App() {\n  const [network, updateNetwork] = useState(network1);\n  const [isClicked, startAnimation] = useState(true);\n\n  const prim = (net, nods, canvas) => {\n    let maxW = 10000;\n    let n;\n    let filtered;\n    let i = 0;\n    let l = 0;\n\n    let sorted = net.sort(function(a,b){ \n      var x = a.w < b.w? -1:1; \n      return x; \n    });\n\n    console.log(sorted)\n\n    let forest = new UnionFind(nods.length);\n\n    let parent = []\n    let rank = []\n    let minNode, u, v, w, x, y;\n\n    for(let node of nods){\n      parent.push(node)\n      rank.push(0)\n    }\n    console.log('parent', parent)\n\n    while (l < (nods.length -1) && i < net.length) {\n      minNode = sorted[i];\n      console.log(minNode);\n      u = minNode.e[0]\n      v = minNode.e[1]\n      w = minNode.w\n      i = i + 1\n      console.log('u v w', u,v,w)\n\n      x = forest.find(u)\n      y = forest.find(v)\n      console.log('x,y', x,y)\n\n      if (x != y) {\n        l = l + 1;\n        forest.link(u, v);\n        console.log(u,v)\n\n        canvas.node(u).highlight().size('1.25x')\n        canvas.node(u).color('orange')\n        canvas.pause(0.5)\n\n        canvas.edge([u, v]).highlight(0)\n        canvas.edge([u, v]).traverse('red').thickness(5)\n        canvas.node(v).highlight().size('1.25x')\n        canvas.node(v).color('orange')\n        canvas.pause(0.5)\n      }\n    }\n  }\n\n  useEffect(() => {\n    const canvas = createCanvas('graph');\n    canvas.remove();\n    canvas.size([800, 800]);\n    canvas.zoom(1.5);\n    canvas.edgelayout('symmetric');\n    canvas.nodes(network.nodes).add().color('blue');\n\n    network.edges.map(item => {\n      canvas.edge(item.e).add({ length: item.w }).label().add({ text: item.w });\n    })\n    canvas.pause(2);\n\n    if (isClicked) {\n      prim(network.edges, network.nodes, canvas)\n      startAnimation(false)\n    }\n  })\n\n  return (\n    <div className=\"App\">\n      <div className=\"graph-section\">\n        <h2>Kruskal Algorithm</h2>\n        <button className=\"btn\" onClick={() => {\n          updateNetwork(network1);\n          startAnimation(true);\n          }}>\n          Network1\n        </button>\n        <button className=\"btn\" onClick={() => {\n          updateNetwork(network2);\n          startAnimation(true);\n          }}>\n          Network2\n        </button>\n        <div id=\"graph\"></div>\n        <button className=\"btn\" onClick={() => startAnimation(true)}>\n          Replay\n        </button>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}